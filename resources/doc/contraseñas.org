#+title: Seguridad de contraseñas
#+author: Miguel Piña
#+date: [2017-05-07 dom 10:57]

La seguridad de los usuarios de una aplicación o sitio web dependen de varios
factores y uno de los más importantes es la seguridad con la que está almacenada
la contraseña.

* ¿Cómo almacenar una contraseña de forma segura?

Lo que nunca debería de pasar es que las contraseñas estén almacenadas en texto
plano, entonces, ¿Cómo podemos almacenar una contraseña?

Para almacenar de forma segura una contraseña, hay que aplicarle una función
*hash* que produzca una cadena de longitud fija y dependiendo del algoritmo
aplicado, puede ser irreversible.

Sin embargo en ocasiones esto no es suficiente, ya que a pesar de que la función
hash puede devolver un valor irreversible, actualmente los piratas informáticos
tiene técnicas para darle la vuelta a este problema.

La forma más común de solucionar este problema es agregar una sal a la
contraseña antes de pasarla por la función *hash*. Los algoritmos más comunes
para la función *hash* son *MD5*, *SHA1*, *bcrypt* y *blowfish*, aunque no todos son
óptimos para este propósito ya que lo ideal es que el algoritmo sea lento para
retrasar un posible ataque de fuerza bruta o generación de una tablas de
contraseñas, tres de los algoritmos que cumplen con este requisito son bcrypt,
blowfish o PKCS5.



  public class PasswordUtil {

      private static final Random random = new Random();

      /**
       ,* Obtiene el hash y la sal a partir de una contraseña
       ,*/
      public static HashSalt getHash(String password) throws Exception {
          byte[] salt = new byte[16];
          // Genera la sal de forma aleatoria
          random.nextBytes(salt);
          KeySpec spec = new PBEKeySpec(password.toCharArray(), salt, 65536, 128);
          try {
              // Obtiene una instancia para el algoritmo
              SecretKeyFactory f = SecretKeyFactory.getInstance("PBEWithHmacSHA256AndAES_128");
              // Genera el hash
              byte[] hash = f.generateSecret(spec).getEncoded();
              Base64.Encoder enc = Base64.getEncoder();
              // convierte hash y sal a cadena de texto
              return new HashSalt(enc.encodeToString(hash), enc.encodeToString(salt));
          }
          catch(NoSuchAlgorithmException e) {
              System.out.println(e.getMessage());
          }
          catch (InvalidKeySpecException e) {
              System.out.println(e.getMessage());
          }

          throw new Exception("No se pudo crear hash");
      }

      public static boolean ValidatePass(String password, String stringHash, String stringSalt) {
          Base64.Decoder dec = Base64.getDecoder();
          // Convierte la sal a arreglo de bytes
          byte[] salt = dec.decode(stringSalt);
          KeySpec spec = new PBEKeySpec(password.toCharArray(), salt, 65536, 128);
          try {
              // Obtiene instancia del algoritmo
              SecretKeyFactory f = SecretKeyFactory.getInstance("PBEWithHmacSHA256AndAES_128");
              // Genera el hash como arreglo de bytes
              byte[] hash = f.generateSecret(spec).getEncoded();
              Base64.Encoder enc = Base64.getEncoder();
              // convierte el hash a cadena de texto
              String currentHash = enc.encodeToString(hash);
              // compara si los hash son iguales
              return currentHash.equals(stringHash);
          }
          catch(NoSuchAlgorithmException e) {
              System.out.println(e.getMessage());
          }
          catch (InvalidKeySpecException e) {
              System.out.println(e.getMessage());
          }

          return false;
      }
  }

  class HashSalt {
      private String hash;
      private String salt;

      public HashSalt(String hash, String salt) {
          this.hash = hash;
          this.salt = salt;
      }

      /* Getters y setters omitidos*/
  }
#+end_src
